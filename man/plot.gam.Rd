% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_gam.R
\name{plot.gam}
\alias{plot.gam}
\title{Basic GAM plotting}
\usage{
\method{plot}{gam}(x, n = 100, n2 = 40, select = NULL, ...)
}
\arguments{
\item{x}{A fitted gam object as produced by \code{mgcv::gam()} or a \code{gamViz} object,
produced by \code{mgcViz::getViz()}.}

\item{n}{number of points used for each 1-d plot. For a nice smooth plot
this needs to be several times the estimated degrees of freedom for the smooth.}

\item{n2}{square root of number of points used to grid estimates of 2D functions
for plotting contours or heatmaps.}

\item{select}{allows plotting a subset of model term. For instance, if you just want the plot
for the second smooth term set \code{select = 2}.}

\item{...}{other parameters, such as \code{maxpo} or \code{trans} to be passed to the specific
plotting methods for each effect (e.g. to \code{plot.mgcv.smooth.1D}).}
}
\description{
This function overwrites \code{mgcv::plot.gam()}.
}
\examples{

library(mgcViz)

######## Basic example
# Simulate some data and fit model
set.seed(2)  
dat <- gamSim(1,n=1e3,dist="normal",scale=2)
b <- bam(y~s(x0)+s(x1, x2)+s(x3), data=dat)

# Default smooth effect plotting
plot(b)

# Now on one page and with out title on the second plot
print(plot(b) + labs(title = NULL), pages = 1) 

# So far we used default layers, added in the printing phase, but
# we might want to specify our own layers. Here we is how to do it
pl <- plot(b) + l_points() + l_fitLine(linetype = 3) + l_fitContour() + 
  l_ciLine(colour = 2) + theme_get() + labs(title = NULL)
print(pl, pages = 1)

# We might want to plot only the first smooth
plot(b, select = 1) + l_dens(type = "cond") + l_fitLine() + l_ciLine()

######## Example with "by variable" smooth effect
# Simulate data and fit model
dat <- gamSim(4)
b <- gam(y ~ fac+s(x2,by=fac)+s(x0),data=dat)
# print() only needed because we want to plot on a single page
print(plot(b), pages = 1) 

######## Example with 3D smooth effect which cannot be plotted
# Simulate data and fit model
n <- 5e3
x <- rnorm(n); y <- rnorm(n); z <- rnorm(n); z2 <- rnorm(n)

ob <- (x-z)^2 + (y-z)^2 + z2^3 + rnorm(n)
b1 <- bam(ob ~ s(x, y, z) + s(z2), discrete = TRUE)
b1 <- getViz(b1)

# Only second effect get plotted
plot.gam(b1)
# In fact this does not plot anything
plot.gam(b1, select = 1)
# For plotting effects with more than 2D, one we need specific method. 
# See ?plot.mgcv.smooth.MD

}
